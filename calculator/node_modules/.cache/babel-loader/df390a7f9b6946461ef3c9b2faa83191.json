{"ast":null,"code":"import _objectSpread from \"/home/make/Documents/lareact/front/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/make/Documents/lareact/front/src/main/Calculator.jsx\";\nimport React, { Component } from 'react';\nimport './Calculator.css';\nimport Button from '../components/Button';\nimport Display from '../components/Display';\nconst initialState = {\n  displayValue: '0',\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  current: 0\n};\nexport default class Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = _objectSpread({}, initialState);\n    this.clearMemory = this.clearMemory.bind(this);\n    this.setOperation = this.setOperation.bind(this);\n    this.addDigit = this.addDigit.bind(this);\n  }\n\n  clearMemory() {\n    this.setState(_objectSpread({}, initialState));\n  }\n\n  setOperation(operation) {\n    if (this.state.current === 0) {\n      this.setState({\n        operation,\n        current: 1,\n        clearDisplay: true\n      });\n    } else {\n      const equals = operation === '=';\n      const currentOperation = this.state.operation;\n      const values = [...this.state.values];\n\n      try {\n        values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\n      } catch (e) {\n        values[0] = this.state.values[0];\n      }\n\n      values[1] = 0;\n      this.setState({\n        displayValue: values[0],\n        operation: equals ? null : operation,\n        current: equals ? 0 : 1,\n        clearDisplay: !equals,\n        values\n      });\n    }\n  }\n\n  addDigit(n) {\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return;\n    }\n\n    const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay;\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\n    const displayValue = currentValue + n;\n    this.setState({\n      displayValue,\n      clearDisplay: false\n    });\n\n    if (n !== '.') {\n      const i = this.state.current;\n      const newValue = parseFloat(displayValue);\n      const values = [...this.state.values];\n      values[i] = newValue;\n      this.setState({\n        values\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"calculator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Display, {\n      value: this.state.displayValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"AC\",\n      click: this.clearMemory,\n      triple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"/\",\n      click: this.setOperation,\n      operation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"7\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"8\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"9\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"*\",\n      click: this.setOperation,\n      operation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"4\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"5\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"6\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"-\",\n      click: this.setOperation,\n      operation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"1\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"2\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"3\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"+\",\n      click: this.setOperation,\n      operation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"0\",\n      click: this.addDigit,\n      double: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \".\",\n      click: this.addDigit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"=\",\n      click: this.setOperation,\n      operation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/make/Documents/lareact/front/src/main/Calculator.jsx"],"names":["React","Component","Button","Display","initialState","displayValue","clearDisplay","operation","values","current","Calculator","constructor","props","state","clearMemory","bind","setOperation","addDigit","setState","equals","currentOperation","eval","e","n","includes","currentValue","i","newValue","parseFloat","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './Calculator.css'\n\nimport Button from '../components/Button'\nimport Display from '../components/Display'\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    values: [ 0, 0 ],\n    current:0\n}\n\nexport default class Calculator extends Component{\n\n    state={...initialState}\n\n    constructor ( props ) {\n        super(props)\n        this.clearMemory = this.clearMemory.bind( this )\n        this.setOperation = this.setOperation.bind( this )\n        this.addDigit = this.addDigit.bind( this )\n    }\n\n    clearMemory () {\n        this.setState({...initialState})\n    }\n\n    setOperation ( operation) {\n        if ( this.state.current === 0 ) {\n           this.setState({operation,current:1, clearDisplay:true})\n        } else {\n            const equals = operation === '='\n            const currentOperation = this.state.operation\n            \n            const values = [ ...this.state.values ]\n            try{\n            values[ 0 ] = eval( `${ values[ 0 ] } ${ currentOperation } ${ values[ 1 ] }` )\n            } catch ( e ) {\n                values[0]=this.state.values[0]\n            }\n                \n            values[ 1 ] = 0\n            \n            this.setState( {\n                displayValue: values[ 0 ],\n                operation: equals ?null :operation,\n                current: equals ? 0 : 1,\n                clearDisplay: !equals,\n                values\n            })\n       }\n    }\n\n    addDigit (n) {\n        if ( n === '.' && this.state.displayValue.includes( '.' ) ) {\n            return\n        }\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n        const currentValue = clearDisplay ? '' : this.state.displayValue\n        const displayValue = currentValue + n\n        this.setState( { displayValue, clearDisplay: false } )\n        \n        if ( n !== '.' ) {\n            const i = this.state.current\n            const newValue = parseFloat( displayValue )\n            const values = [ ...this.state.values ]\n            values[ i ] = newValue\n            this.setState({values})\n        }\n    }\n\n    render () {\n\n        return (\n            <div className=\"calculator\">\n                <Display value={this.state.displayValue}/>\n                <Button label=\"AC\" click={this.clearMemory} triple/>\n                <Button label=\"/\" click={ this.setOperation } operation/>\n                <Button label=\"7\" click={ this.addDigit}/>\n                <Button label=\"8\" click={this.addDigit}/>\n                <Button label=\"9\" click={this.addDigit}/>\n                <Button label=\"*\" click={ this.setOperation } operation/>\n                <Button label=\"4\" click={this.addDigit}/>\n                <Button label=\"5\" click={this.addDigit} />\n                <Button label=\"6\" click={this.addDigit} />\n                <Button label=\"-\" click={ this.setOperation } operation/>\n                <Button label=\"1\" click={this.addDigit} />\n                <Button label=\"2\" click={this.addDigit} />\n                <Button label=\"3\" click={this.addDigit} />\n                <Button label=\"+\" click={ this.setOperation } operation/>\n                <Button label=\"0\" click={this.addDigit} double/>\n                <Button label=\".\" click={this.addDigit} />\n                <Button label=\"=\" click={ this.setOperation } operation/>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}